name: CI
on: [push, pull_request]

permissions:
  actions: write
  checks: write
  contents: write
  deployments: write
  id-token: write
  issues: write
  discussions: write
  packages: write
  pages: write
  pull-requests: write
  repository-projects: write
  security-events: write
  statuses: write

jobs:
  linter:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          path: lilia

      - uses: leafo/gh-actions-lua@v8.0.0
        with:
          luaVersion: "5.2"

      - uses: leafo/gh-actions-luarocks@v4.0.0

      - name: Pull gluacheck
        uses: actions/checkout@v3
        with:
          repository: LiliaFramework/GluaCheck
          path: luacheck

      - name: Build gluacheck
        working-directory: luacheck
        run: luarocks make

      - name: Lint
        working-directory: lilia
        run: |
          luacheck . --no-redefined \
            --no-global --no-self \
            --no-max-line-length --no-max-code-line-length \
            --no-max-string-line-length --no-max-comment-line-length \
            --no-max-cyclomatic-complexity

  docs:
    runs-on: ubuntu-latest
    needs: linter
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && github.repository == 'LiliaFramework/Lilia' && success()
    steps:
      - uses: actions/checkout@v3
        with:
          path: lilia

      - uses: leafo/gh-actions-lua@v8.0.0
        with:
          luaVersion: "5.2"

      - uses: leafo/gh-actions-luarocks@v4.0.0

      - name: Pull LDoc
        uses: actions/checkout@v3
        with:
          repository: LiliaFramework/LDoc
          path: ldoc

      - name: Build LDoc
        working-directory: ldoc
        run: luarocks make

      - name: Build docs
        working-directory: lilia
        run: ldoc . --fatalwarnings 

      - name: Copy assets
        working-directory: lilia
        run: |
          cp -v docs/css/* docs/html
          cp -v docs/js/* docs/html

      - name: Deploy
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && github.repository == 'LiliaFramework/Lilia' && success()
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: lilia/docs/html

  sync:
    runs-on: ubuntu-latest
    needs: docs
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && github.repository == 'LiliaFramework/Lilia' && success()
    steps:
      - name: Checkout source repository
        uses: actions/checkout@v3

      - name: Push to destination repository
        env:
          GITHUB_TOKEN: ${{ secrets.LiliaGitSecret }}
          ORIGINAL_REPO_NAME: ${{ github.event.repository.name }}
          ORG_NAME: LiliaFramework
        run: |
          git config --global user.email "githubactions@github.com"
          git config --global user.name "Github Actions"
          git clone https://${ORG_NAME}:${GITHUB_TOKEN}@github.com/${ORG_NAME}/LiliaFramework.github.io.git liliagit
          cd liliagit
          git remote add ${ORIGINAL_REPO_NAME} https://${ORG_NAME}:${GITHUB_TOKEN}@github.com/${ORG_NAME}/${{ env.ORIGINAL_REPO_NAME }}.git
          git remote update
          git merge ${ORIGINAL_REPO_NAME}/gh-pages --allow-unrelated-histories gh-pages
          git push origin gh-pages 

  build-cache:
    runs-on: ubuntu-latest
    needs: [linter, docs, sync]
    permissions:
      contents: write
      pull-requests: write
    env:
      CACHE_BRANCH: credits-cache
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ env.CACHE_BRANCH }}
          fetch-depth: 0

      - uses: actions/github-script@v6
        id: getContributors
        with:
          script: |
            const { data: contributors } = await github.rest.repos.listContributors({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 50,
            })
            return contributors

      - uses: actions/github-script@v6
        id: getNames
        with:
          github-token: ${{ secrets.LiliaGitSecret }}
          script: |
            const contributors = JSON.parse(process.env.getContributors)
            let query = "query{search(first:50,query:\""
            for (const contributor of contributors) {
              if (contributor.login) {
                query += "user:" + contributor.login + " "
              }
            }
            query += "\"type:USER){nodes{... on User {name id}}}}"
            const result = await github.graphql(query)
            return result.search.nodes

      - uses: actions/github-script@v6
        id: buildData
        with:
          script: |
            const fs = require("fs")
            const util = require("util")
            const writeFileAsync = util.promisify(fs.writeFile)
            const fetch = require("node-fetch")

            const blocklist = JSON.parse(process.env.BLOCKLIST)
            const contributors = JSON.parse(process.env.getContributors)
            const names = JSON.parse(process.env.getNames)

            const blockedUsers = blocklist.reduce((acc, user) => {
              acc[user] = true
              return acc
            }, {})

            const namedUsers = names.reduce((acc, user) => {
              acc[user.id] = user.name
              return acc
            }, {})

            const contributorMetadata = []
            for (const contributor of contributors) {
              if (!blockedUsers[contributor.id]) {
                contributorMetadata.push({
                  id: contributor.id,
                  name: namedUsers[contributor.id] || contributor.login,
                  login: contributor.login,
                })

                const avatarResponse = await fetch("https://avatars.githubusercontent.com/u/" + contributor.id, {
                  method: "GET",
                  headers: {
                    'Accept': 'image/avif,image/webp,*/*'
                  },
                })
                const avatarBuffer = await avatarResponse.buffer()
                await writeFileAsync(`./${contributor.id}`, avatarBuffer)
              }
            }

            await writeFileAsync("./contributors.json", JSON.stringify(contributorMetadata))

      - name: Commit files
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add .
          git commit --allow-empty -a -m "Rebuild credits-cache"

      - name: Push changes
        uses: ad-m/github-push-action@v0.8.0
        with:
          github_token: ${{ secrets.LiliaGitSecret }}
          branch: ${{ env.CACHE_BRANCH }}
          force: true

  release:
    runs-on: ubuntu-latest
    needs: linter
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          path: lilia

      - name: Check and Delete Old Releases
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Check if there are any releases
          releases=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
          "https://api.github.com/repos/${{ github.repository }}/releases")
          
          if [ "$(echo $releases | jq '. | length')" -gt 0 ]; then
            # Delete each release
            echo "Deleting releases..."
            for release_id in $(echo $releases | jq -r '.[].id'); do
              echo "Deleting release $release_id"
              curl -s -X DELETE -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/repos/${{ github.repository }}/releases/$release_id"
            done
          else
            echo "No releases to delete."
          fi

      - name: Check and Delete Old Tags
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Check if there are any tags
          tags=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
          "https://api.github.com/repos/${{ github.repository }}/git/refs/tags")
          
          if [ "$(echo $tags | jq '. | length')" -gt 0 ]; then
            # Delete each tag
            echo "Deleting tags..."
            for tag_ref in $(echo $tags | jq -r '.[].ref'); do
              echo "Deleting tag $tag_ref"
              curl -s -X DELETE -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/repos/${{ github.repository }}/git/refs/$tag_ref"
            done
          else
            echo "No tags to delete."
          fi

      - name: Compress lilia folder
        run: |
          mkdir release
          cp -r lilia/lilia release/
          cd release
          zip -r lilia.zip lilia
          cd ..

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Lilia Framework
          body: |
            Automatically generated release from commit ${{ github.sha }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release/lilia.zip
          asset_name: lilia.zip
          asset_content_type: application/zip
